apiVersion: ray.io/v1alpha1
kind: RayCluster
metadata:
  name: {{ .Values.rayCluster.metadata.name }}
  namespace: {{ .Values.namespace }}
spec:
  rayVersion: {{ .Values.rayCluster.spec.rayVersion }}
  headGroupSpec:
    serviceType: LoadBalancer
    rayStartParams:
      dashboard-host: {{ .Values.rayCluster.spec.headGroupSpec.rayStartParams.dashboardHost }}
    serviceAnnotations:
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
      service.beta.kubernetes.io/aws-load-balancer-scheme: internal
      # service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing # Private Load Balancer can only be accessed within the VPC
      service.beta.kubernetes.io/aws-load-balancer-type: external
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
      service.beta.kubernetes.io/aws-load-balancer-ip-address-type: ipv4
    template:
      spec:
        volumes:
          - name: efs-shared-ray
            persistentVolumeClaim:
              claimName: efs-shared-ray  # PVC 的名称
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                preference:
                  matchExpressions:
                    - key: NodeGroupType
                      operator: In
                      values: [ "core" ]
              - weight: 90
                preference:
                  matchExpressions:
                    - key: NodeGroupType
                      operator: In
                      values: [ "gpu" ]
        tolerations:
          - key: nvidia.com/gpu
            operator: Exists
            effect: NoSchedule
        containers:
          - name: ray-head
            volumeMounts:
              - name: efs-shared-ray
                mountPath: /home/ray/ianleely
                subPath: ianleely
              - name: efs-shared-ray
                mountPath: /home/shared
                subPath: shared
            image: {{ .Values.rayCluster.spec.headGroupSpec.template.spec.containers.rayHead.image }}
            resources:
              limits:
                cpu: {{ .Values.rayCluster.spec.headGroupSpec.template.spec.containers.rayHead.resources.limits.cpu }}
                memory: {{ .Values.rayCluster.spec.headGroupSpec.template.spec.containers.rayHead.resources.limits.memory }}
                nvidia.com/gpu: {{ .Values.rayCluster.spec.headGroupSpec.template.spec.containers.rayHead.resources.limits.nvidiaGpu }}
              requests:
                cpu: {{ .Values.rayCluster.spec.headGroupSpec.template.spec.containers.rayHead.resources.requests.cpu }}
                memory: {{ .Values.rayCluster.spec.headGroupSpec.template.spec.containers.rayHead.resources.requests.memory }}
                nvidia.com/gpu: {{ .Values.rayCluster.spec.headGroupSpec.template.spec.containers.rayHead.resources.requests.nvidiaGpu }}
            ports:
              - containerPort: 6379
                name: gcs-server
              - containerPort: 8265
                name: dashboard
              - containerPort: 10001
                name: client
            env:
              - name: RAY_GRAFANA_HOST
                value: http://kube-prometheus-stack-grafana.kube-prometheus-stack.svc:80
              - name: RAY_PROMETHEUS_HOST
                value: http://kube-prometheus-stack-prometheus.kube-prometheus-stack.svc:9090
  workerGroupSpecs:
    - replicas: {{ .Values.rayCluster.spec.workerGroupSpecs.replicas }}
      minReplicas: {{ .Values.rayCluster.spec.workerGroupSpecs.minReplicas }}
      maxReplicas: {{ .Values.rayCluster.spec.workerGroupSpecs.maxReplicas }}
      rayStartParams: {}
      groupName: {{ .Values.rayCluster.spec.workerGroupSpecs.groupName }}
      template:
        spec:
          volumes:
            - name: efs-shared-ray
              persistentVolumeClaim:
                claimName: efs-shared-ray
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  preference:
                    matchExpressions:
                      - key: NodeGroupType
                        operator: In
                        values: [ "core" ]
                - weight: 90
                  preference:
                    matchExpressions:
                      - key: NodeGroupType
                        operator: In
                        values: [ "gpu" ]
          tolerations:
            - key: nvidia.com/gpu
              operator: Exists
              effect: NoSchedule
          containers:
            - name: ray-worker
              volumeMounts:
                - name: efs-shared-ray
                  mountPath: /home/ray/ianleely
                  subPath: ianleely
                - name: efs-shared-ray
                  mountPath: /home/shared
                  subPath: shared
              image: {{ .Values.rayCluster.spec.workerGroupSpecs.template.spec.containers.rayWorker.image }}
              lifecycle:
                preStop:
                  exec:
                    command: ["/bin/sh","-c","ray stop"]
              resources:
                limits:
                  cpu: {{ .Values.rayCluster.spec.workerGroupSpecs.template.spec.containers.rayWorker.resources.limits.cpu }}
                  memory: {{ .Values.rayCluster.spec.workerGroupSpecs.template.spec.containers.rayWorker.resources.limits.memory }}
                  nvidia.com/gpu: {{ .Values.rayCluster.spec.workerGroupSpecs.template.spec.containers.rayWorker.resources.limits.nvidiaGpu }}
                requests:
                  cpu: {{ .Values.rayCluster.spec.workerGroupSpecs.template.spec.containers.rayWorker.resources.requests.cpu }}
                  memory: {{ .Values.rayCluster.spec.workerGroupSpecs.template.spec.containers.rayWorker.resources.requests.memory }}
                  nvidia.com/gpu: {{ .Values.rayCluster.spec.workerGroupSpecs.template.spec.containers.rayWorker.resources.requests.nvidiaGpu }}